#include <DFRobot_sim808.h>
#include <SoftwareSerial.h>
#include <TinyGPS.h>
//#define USE_ARDUINO_INTERRUPTS true
//#include <PulseSensorPlayground.h>
#include "VoiceRecognitionV3.h"

#define PHONE_NUMBER "01862648528"   
#define PHONE_NUMBER_2 "01775273351"   
#define MESSAGE  "Help Me"

//SoftwareSerial gsmSerial(2,3);
//DFRobot_SIM808 sim808(&gsmSerial);
DFRobot_SIM808 sim808(&Serial);

TinyGPS gps;
SoftwareSerial gpsSerial(4,5);
String lat = "23.780591"; 
String lon = "90.407905";
String loc = "Help me, I am at 23.780591, 90.407905";
#define location "Help me, I am at 23.780591, 90.407905"
//
//const int PulseWire = 0;       
//const int LED13 = 13;          
//int Threshold = 550;           
//PulseSensorPlayground pulseSensor;

VR myVR(6, 7);    
uint8_t records[7]; 
uint8_t buf[64];

#define onRecord    (5)
#define offRecord   (4) 
char state;
int myBPM;

void setup() {
  pinMode(8, INPUT_PULLUP);
  Serial.begin(9600);
//  gsmSerial.begin(9600);
  gpsSerial.begin(9600);
  
  while(!sim808.init()) {
    delay(1000);
    Serial.print("Sim808 init error\r\n");
  }  
  Serial.println("Sim808 init success");

//  pulseSensor.analogInput(PulseWire);   
//  pulseSensor.blinkOnPulse(LED13);       
//  pulseSensor.setThreshold(Threshold);   
//
//  if (pulseSensor.begin()) {
//    Serial.println("We created a pulseSensor Object !");  //This prints one time at Arduino power-up,  or on Arduino reset.  
//  }

  myVR.begin(9600);
  Serial.println("Elechouse Voice Recognition V3 Module\r\nControl LED sample");
  
  if(myVR.clear() == 0){
    Serial.println("Recognizer cleared.");
  }else{
    Serial.println("Not find VoiceRecognitionModule.");
    Serial.println("Please check connection and restart Arduino.");
    while(1);
  }
  if(myVR.load((uint8_t)onRecord) >= 0){
    Serial.println("onRecord loaded");
  }
  if(myVR.load((uint8_t)offRecord) >= 0){
    Serial.println("offRecord loaded");
  }
}

void loop() { 
//  Serial.println(digitalRead(8));
  getGPS();
//  getPulse();
  getVoice();
  
  if(digitalRead(8) == 0){
    state = 's';
  }
  
  if(Serial.available()){
    state = Serial.read();
  }
  switch(state){
    case 's':
    sim808.sendSMS(PHONE_NUMBER,location); 
    state = 'x';
    break;
    case 't':
    sim808.sendSMS(PHONE_NUMBER,location);
    delay(2000); 
    sim808.sendSMS(PHONE_NUMBER_2,location); 
    state = 'x';
    break;
    default:
    break;
  }
}

void getGPS()
{
  bool newData = false;
  unsigned long chars;
  unsigned short sentences, failed;

  for (unsigned long start = millis(); millis() - start < 1000;)
  {
    while (gpsSerial.available())
    {
      char c = gpsSerial.read();
      if (gps.encode(c)) 
        newData = true;
    }
  }

  if (newData)
  {
    float flat, flon;
    unsigned long age;
    gps.f_get_position(&flat, &flon, &age);
    lat = String (flat, 6);
    lon = String (flon, 6);
  }
  loc = "Help me, I am at "+lat+","+lon;
  loc.toCharArray(location, 64);
}


//void getPulse(){
//  myBPM = pulseSensor.getBeatsPerMinute(); 
//  if (pulseSensor.sawStartOfBeat()) {      
////    Serial.println("â™¥  A HeartBeat Happened ! "); 
////    Serial.print("BPM: ");                      
//    Serial.println(myBPM); 
//    if(myBPM > 150 || myBPM < 50){
//      state = 's';    
//    }                       
//  }
//  delay(20);                   
//}


void getVoice(){
  int ret;
  ret = myVR.recognize(buf, 50);
  if(ret>0){
    switch(buf[1]){
      case onRecord:
        /** turn on LED */
        /*send sms to parents*/
        state = 's';
        break;
      case offRecord:
        /** turn off LED*/
        /*send sms to parents and police*/
        state = 't';
        break;
      default:
        Serial.println("Record function undefined");
        break;
    }
    /** voice recognized */
    printVR(buf);
  }
}

void printSignature(uint8_t *buf, int len)
{
  int i;
  for(i=0; i<len; i++){
    if(buf[i]>0x19 && buf[i]<0x7F){
      Serial.write(buf[i]);
    }
    else{
      Serial.print("[");
      Serial.print(buf[i], HEX);
      Serial.print("]");
    }
  }
}

void printVR(uint8_t *buf)
{
  Serial.println("VR Index\tGroup\tRecordNum\tSignature");

  Serial.print(buf[2], DEC);
  Serial.print("\t\t");

  if(buf[0] == 0xFF){
    Serial.print("NONE");
  }
  else if(buf[0]&0x80){
    Serial.print("UG ");
    Serial.print(buf[0]&(~0x80), DEC);
  }
  else{
    Serial.print("SG ");
    Serial.print(buf[0], DEC);
  }
  Serial.print("\t");

  Serial.print(buf[1], DEC);
  Serial.print("\t\t");
  if(buf[3]>0){
    printSignature(buf+4, buf[3]);
  }
  else{
    Serial.print("NONE");
  }
  Serial.println("\r\n");
}

